/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface EscrowLibInterface extends utils.Interface {
  functions: {
    "computeShare(uint256,uint256,uint256)": FunctionFragment;
    "min(uint256,uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "computeShare" | "min"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeShare",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "min",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "min", data: BytesLike): Result;

  events: {
    "DepositedForDispute(address,uint256)": EventFragment;
    "Funded(address,int256)": EventFragment;
    "RulesApproved()": EventFragment;
    "RulesDeclined()": EventFragment;
    "RulesProposed()": EventFragment;
    "StateChanged(uint8)": EventFragment;
    "VotingStarted()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DepositedForDispute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RulesApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RulesDeclined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RulesProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingStarted"): EventFragment;
}

export interface DepositedForDisputeEventObject {
  userAddress: string;
  amount: BigNumber;
}
export type DepositedForDisputeEvent = TypedEvent<
  [string, BigNumber],
  DepositedForDisputeEventObject
>;

export type DepositedForDisputeEventFilter =
  TypedEventFilter<DepositedForDisputeEvent>;

export interface FundedEventObject {
  userAddress: string;
  amount: BigNumber;
}
export type FundedEvent = TypedEvent<[string, BigNumber], FundedEventObject>;

export type FundedEventFilter = TypedEventFilter<FundedEvent>;

export interface RulesApprovedEventObject {}
export type RulesApprovedEvent = TypedEvent<[], RulesApprovedEventObject>;

export type RulesApprovedEventFilter = TypedEventFilter<RulesApprovedEvent>;

export interface RulesDeclinedEventObject {}
export type RulesDeclinedEvent = TypedEvent<[], RulesDeclinedEventObject>;

export type RulesDeclinedEventFilter = TypedEventFilter<RulesDeclinedEvent>;

export interface RulesProposedEventObject {}
export type RulesProposedEvent = TypedEvent<[], RulesProposedEventObject>;

export type RulesProposedEventFilter = TypedEventFilter<RulesProposedEvent>;

export interface StateChangedEventObject {
  state: number;
}
export type StateChangedEvent = TypedEvent<[number], StateChangedEventObject>;

export type StateChangedEventFilter = TypedEventFilter<StateChangedEvent>;

export interface VotingStartedEventObject {}
export type VotingStartedEvent = TypedEvent<[], VotingStartedEventObject>;

export type VotingStartedEventFilter = TypedEventFilter<VotingStartedEvent>;

export interface EscrowLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeShare(
      fee: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      totalDeposits: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    min(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  computeShare(
    fee: PromiseOrValue<BigNumberish>,
    depositAmount: PromiseOrValue<BigNumberish>,
    totalDeposits: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  min(
    a: PromiseOrValue<BigNumberish>,
    b: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    computeShare(
      fee: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      totalDeposits: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    min(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "DepositedForDispute(address,uint256)"(
      userAddress?: null,
      amount?: null
    ): DepositedForDisputeEventFilter;
    DepositedForDispute(
      userAddress?: null,
      amount?: null
    ): DepositedForDisputeEventFilter;

    "Funded(address,int256)"(
      userAddress?: null,
      amount?: null
    ): FundedEventFilter;
    Funded(userAddress?: null, amount?: null): FundedEventFilter;

    "RulesApproved()"(): RulesApprovedEventFilter;
    RulesApproved(): RulesApprovedEventFilter;

    "RulesDeclined()"(): RulesDeclinedEventFilter;
    RulesDeclined(): RulesDeclinedEventFilter;

    "RulesProposed()"(): RulesProposedEventFilter;
    RulesProposed(): RulesProposedEventFilter;

    "StateChanged(uint8)"(state?: null): StateChangedEventFilter;
    StateChanged(state?: null): StateChangedEventFilter;

    "VotingStarted()"(): VotingStartedEventFilter;
    VotingStarted(): VotingStartedEventFilter;
  };

  estimateGas: {
    computeShare(
      fee: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      totalDeposits: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    min(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeShare(
      fee: PromiseOrValue<BigNumberish>,
      depositAmount: PromiseOrValue<BigNumberish>,
      totalDeposits: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    min(
      a: PromiseOrValue<BigNumberish>,
      b: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
