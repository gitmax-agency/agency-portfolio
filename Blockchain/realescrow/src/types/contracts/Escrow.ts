/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type EscrowUserStruct = {
  userAddress: PromiseOrValue<string>;
  userType: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
};

export type EscrowUserStructOutput = [string, number, BigNumber] & {
  userAddress: string;
  userType: number;
  amount: BigNumber;
};

export type EscrowRulesStruct = {
  paymentToken: PromiseOrValue<string>;
  depositAmount: PromiseOrValue<BigNumberish>;
  registrationFee: PromiseOrValue<BigNumberish>;
  contingencyDisputeFee: PromiseOrValue<BigNumberish>;
  registrationDisputeFee: PromiseOrValue<BigNumberish>;
  users: EscrowUserStruct[];
  contingencyConditions: PromiseOrValue<string>;
  registrationConditions: PromiseOrValue<string>;
  contingencyTime: PromiseOrValue<BigNumberish>;
  fundingTime: PromiseOrValue<BigNumberish>;
  registrationTime: PromiseOrValue<BigNumberish>;
  responseTime: PromiseOrValue<BigNumberish>;
};

export type EscrowRulesStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  EscrowUserStructOutput[],
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  paymentToken: string;
  depositAmount: BigNumber;
  registrationFee: BigNumber;
  contingencyDisputeFee: BigNumber;
  registrationDisputeFee: BigNumber;
  users: EscrowUserStructOutput[];
  contingencyConditions: string;
  registrationConditions: string;
  contingencyTime: BigNumber;
  fundingTime: BigNumber;
  registrationTime: BigNumber;
  responseTime: BigNumber;
};

export interface EscrowInterface extends utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "changeAddress(address)": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "changeArbiter(address)": FunctionFragment;
    "changeEscrowFeeRecipient(address)": FunctionFragment;
    "claimContingenciesDefault()": FunctionFragment;
    "claimFundingDefault()": FunctionFragment;
    "claimRegistrationDefault()": FunctionFragment;
    "confirmAddressChange()": FunctionFragment;
    "confirmAdminChange()": FunctionFragment;
    "creator()": FunctionFragment;
    "data()": FunctionFragment;
    "deleteEscrow()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositDisputeFee(uint256)": FunctionFragment;
    "getProposedUsers()": FunctionFragment;
    "getUserDeposits()": FunctionFragment;
    "getUserDisputeDeposits()": FunctionFragment;
    "getUsers()": FunctionFragment;
    "newAdmin()": FunctionFragment;
    "newUserAddresses(uint256)": FunctionFragment;
    "proposeNewRules((address,uint256,uint256,uint256,uint256,(address,uint8,uint256)[],string,string,uint256,uint256,uint256,uint256))": FunctionFragment;
    "proposedRules()": FunctionFragment;
    "rules()": FunctionFragment;
    "rulesVoteData()": FunctionFragment;
    "voteData()": FunctionFragment;
    "voteOnContingencies(bool)": FunctionFragment;
    "voteOnRegistration(bool)": FunctionFragment;
    "voteOnRules(bool)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "admin"
      | "changeAddress"
      | "changeAdmin"
      | "changeArbiter"
      | "changeEscrowFeeRecipient"
      | "claimContingenciesDefault"
      | "claimFundingDefault"
      | "claimRegistrationDefault"
      | "confirmAddressChange"
      | "confirmAdminChange"
      | "creator"
      | "data"
      | "deleteEscrow"
      | "deposit"
      | "depositDisputeFee"
      | "getProposedUsers"
      | "getUserDeposits"
      | "getUserDisputeDeposits"
      | "getUsers"
      | "newAdmin"
      | "newUserAddresses"
      | "proposeNewRules"
      | "proposedRules"
      | "rules"
      | "rulesVoteData"
      | "voteData"
      | "voteOnContingencies"
      | "voteOnRegistration"
      | "voteOnRules"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeArbiter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeEscrowFeeRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimContingenciesDefault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimFundingDefault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRegistrationDefault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmAddressChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmAdminChange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositDisputeFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDisputeDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getUsers", values?: undefined): string;
  encodeFunctionData(functionFragment: "newAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newUserAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewRules",
    values: [EscrowRulesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedRules",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rules", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rulesVoteData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voteData", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteOnContingencies",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnRegistration",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnRules",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeArbiter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeEscrowFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimContingenciesDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFundingDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRegistrationDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmAddressChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmAdminChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositDisputeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDisputeDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newUserAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rulesVoteData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteOnContingencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnRegistration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    changeAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeAdmin(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeArbiter(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeEscrowFeeRecipient(
      newEscrowFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimContingenciesDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFundingDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRegistrationDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmAddressChange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmAdminChange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    data(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        state: number;
        saleAmount: BigNumber;
        escrowFee: BigNumber;
        buyersDepositAmount: BigNumber;
        buyersDisputeDepositAmount: BigNumber;
        sellersDisputeDepositAmount: BigNumber;
        depositFundedTime: BigNumber;
        contingenciesCompletedTime: BigNumber;
        purchaseFundedTime: BigNumber;
        disputeFundedTime: BigNumber;
        registrationFeePaid: BigNumber;
        escrowFeeRecipient: string;
      }
    >;

    deleteEscrow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositDisputeFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProposedUsers(
      overrides?: CallOverrides
    ): Promise<[EscrowUserStructOutput[]]>;

    getUserDeposits(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getUserDisputeDeposits(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getUsers(overrides?: CallOverrides): Promise<[EscrowUserStructOutput[]]>;

    newAdmin(overrides?: CallOverrides): Promise<[string]>;

    newUserAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proposeNewRules(
      newEscrowRules: EscrowRulesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposedRules(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        paymentToken: string;
        depositAmount: BigNumber;
        registrationFee: BigNumber;
        contingencyDisputeFee: BigNumber;
        registrationDisputeFee: BigNumber;
        contingencyConditions: string;
        registrationConditions: string;
        contingencyTime: BigNumber;
        fundingTime: BigNumber;
        registrationTime: BigNumber;
        responseTime: BigNumber;
      }
    >;

    rules(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        paymentToken: string;
        depositAmount: BigNumber;
        registrationFee: BigNumber;
        contingencyDisputeFee: BigNumber;
        registrationDisputeFee: BigNumber;
        contingencyConditions: string;
        registrationConditions: string;
        contingencyTime: BigNumber;
        fundingTime: BigNumber;
        registrationTime: BigNumber;
        responseTime: BigNumber;
      }
    >;

    rulesVoteData(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isVotePending: boolean;
        voteStartTime: BigNumber;
      }
    >;

    voteData(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isVotePending: boolean;
        voteStartTime: BigNumber;
      }
    >;

    voteOnContingencies(
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteOnRegistration(
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteOnRules(
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  changeAddress(
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeAdmin(
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeArbiter(
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeEscrowFeeRecipient(
    newEscrowFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimContingenciesDefault(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFundingDefault(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRegistrationDefault(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmAddressChange(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmAdminChange(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  creator(overrides?: CallOverrides): Promise<string>;

  data(
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      state: number;
      saleAmount: BigNumber;
      escrowFee: BigNumber;
      buyersDepositAmount: BigNumber;
      buyersDisputeDepositAmount: BigNumber;
      sellersDisputeDepositAmount: BigNumber;
      depositFundedTime: BigNumber;
      contingenciesCompletedTime: BigNumber;
      purchaseFundedTime: BigNumber;
      disputeFundedTime: BigNumber;
      registrationFeePaid: BigNumber;
      escrowFeeRecipient: string;
    }
  >;

  deleteEscrow(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositDisputeFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProposedUsers(
    overrides?: CallOverrides
  ): Promise<EscrowUserStructOutput[]>;

  getUserDeposits(overrides?: CallOverrides): Promise<BigNumber[]>;

  getUserDisputeDeposits(overrides?: CallOverrides): Promise<BigNumber[]>;

  getUsers(overrides?: CallOverrides): Promise<EscrowUserStructOutput[]>;

  newAdmin(overrides?: CallOverrides): Promise<string>;

  newUserAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  proposeNewRules(
    newEscrowRules: EscrowRulesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposedRules(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      paymentToken: string;
      depositAmount: BigNumber;
      registrationFee: BigNumber;
      contingencyDisputeFee: BigNumber;
      registrationDisputeFee: BigNumber;
      contingencyConditions: string;
      registrationConditions: string;
      contingencyTime: BigNumber;
      fundingTime: BigNumber;
      registrationTime: BigNumber;
      responseTime: BigNumber;
    }
  >;

  rules(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      paymentToken: string;
      depositAmount: BigNumber;
      registrationFee: BigNumber;
      contingencyDisputeFee: BigNumber;
      registrationDisputeFee: BigNumber;
      contingencyConditions: string;
      registrationConditions: string;
      contingencyTime: BigNumber;
      fundingTime: BigNumber;
      registrationTime: BigNumber;
      responseTime: BigNumber;
    }
  >;

  rulesVoteData(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isVotePending: boolean; voteStartTime: BigNumber }
  >;

  voteData(
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isVotePending: boolean; voteStartTime: BigNumber }
  >;

  voteOnContingencies(
    vote: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteOnRegistration(
    vote: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteOnRules(
    vote: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    changeAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAdmin(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeArbiter(
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeEscrowFeeRecipient(
      newEscrowFeeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimContingenciesDefault(overrides?: CallOverrides): Promise<void>;

    claimFundingDefault(overrides?: CallOverrides): Promise<void>;

    claimRegistrationDefault(overrides?: CallOverrides): Promise<void>;

    confirmAddressChange(overrides?: CallOverrides): Promise<void>;

    confirmAdminChange(overrides?: CallOverrides): Promise<void>;

    creator(overrides?: CallOverrides): Promise<string>;

    data(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        state: number;
        saleAmount: BigNumber;
        escrowFee: BigNumber;
        buyersDepositAmount: BigNumber;
        buyersDisputeDepositAmount: BigNumber;
        sellersDisputeDepositAmount: BigNumber;
        depositFundedTime: BigNumber;
        contingenciesCompletedTime: BigNumber;
        purchaseFundedTime: BigNumber;
        disputeFundedTime: BigNumber;
        registrationFeePaid: BigNumber;
        escrowFeeRecipient: string;
      }
    >;

    deleteEscrow(overrides?: CallOverrides): Promise<void>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositDisputeFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getProposedUsers(
      overrides?: CallOverrides
    ): Promise<EscrowUserStructOutput[]>;

    getUserDeposits(overrides?: CallOverrides): Promise<BigNumber[]>;

    getUserDisputeDeposits(overrides?: CallOverrides): Promise<BigNumber[]>;

    getUsers(overrides?: CallOverrides): Promise<EscrowUserStructOutput[]>;

    newAdmin(overrides?: CallOverrides): Promise<string>;

    newUserAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    proposeNewRules(
      newEscrowRules: EscrowRulesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedRules(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        paymentToken: string;
        depositAmount: BigNumber;
        registrationFee: BigNumber;
        contingencyDisputeFee: BigNumber;
        registrationDisputeFee: BigNumber;
        contingencyConditions: string;
        registrationConditions: string;
        contingencyTime: BigNumber;
        fundingTime: BigNumber;
        registrationTime: BigNumber;
        responseTime: BigNumber;
      }
    >;

    rules(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        paymentToken: string;
        depositAmount: BigNumber;
        registrationFee: BigNumber;
        contingencyDisputeFee: BigNumber;
        registrationDisputeFee: BigNumber;
        contingencyConditions: string;
        registrationConditions: string;
        contingencyTime: BigNumber;
        fundingTime: BigNumber;
        registrationTime: BigNumber;
        responseTime: BigNumber;
      }
    >;

    rulesVoteData(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isVotePending: boolean;
        voteStartTime: BigNumber;
      }
    >;

    voteData(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & {
        isVotePending: boolean;
        voteStartTime: BigNumber;
      }
    >;

    voteOnContingencies(
      vote: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteOnRegistration(
      vote: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteOnRules(
      vote: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    changeAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeAdmin(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeArbiter(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeEscrowFeeRecipient(
      newEscrowFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimContingenciesDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFundingDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRegistrationDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmAddressChange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmAdminChange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    deleteEscrow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositDisputeFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProposedUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDisputeDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    getUsers(overrides?: CallOverrides): Promise<BigNumber>;

    newAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    newUserAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeNewRules(
      newEscrowRules: EscrowRulesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposedRules(overrides?: CallOverrides): Promise<BigNumber>;

    rules(overrides?: CallOverrides): Promise<BigNumber>;

    rulesVoteData(overrides?: CallOverrides): Promise<BigNumber>;

    voteData(overrides?: CallOverrides): Promise<BigNumber>;

    voteOnContingencies(
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteOnRegistration(
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteOnRules(
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeAddress(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeArbiter(
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeEscrowFeeRecipient(
      newEscrowFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimContingenciesDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFundingDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRegistrationDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmAddressChange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmAdminChange(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteEscrow(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositDisputeFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProposedUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserDisputeDeposits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newUserAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeNewRules(
      newEscrowRules: EscrowRulesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposedRules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rulesVoteData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteOnContingencies(
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteOnRegistration(
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteOnRules(
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
